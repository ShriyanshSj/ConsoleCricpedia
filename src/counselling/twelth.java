/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package counselling;

import java.awt.BorderLayout;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Shriyansh
 */
public class twelth extends javax.swing.JFrame {

    String qry="";
    Connection con;
    PreparedStatement pst;
    Statement st;
     Statement s;
    ResultSet rs;
    String ans1;
    String ans2;
    String ans3;
    String ans4;
    String ans5;
      int mark=0;
             
    public twelth() {
        initComponents();
         this.setSize(800,800);
        this.setBounds(200,150,710,500);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        twelthCmb = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        QuestionTb = new javax.swing.JTable();
        Answer1 = new javax.swing.JTextField();
        Answer2 = new javax.swing.JTextField();
        Answer3 = new javax.swing.JTextField();
        Answer4 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        ResultLbl = new javax.swing.JLabel();
        Answer5 = new javax.swing.JTextField();
        ShowQuestionsBtn = new javax.swing.JButton();
        AnswersBtn = new javax.swing.JButton();
        BackBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(204, 255, 204));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 0, 51));
        jLabel1.setText("Your 12th stream");

        twelthCmb.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        twelthCmb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "PCM", "PCB", "COMMERCE", "ARTS " }));
        twelthCmb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                twelthCmbActionPerformed(evt);
            }
        });

        QuestionTb.setBackground(new java.awt.Color(255, 204, 255));
        QuestionTb.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        QuestionTb.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Questions"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        QuestionTb.setColumnSelectionAllowed(true);
        jScrollPane1.setViewportView(QuestionTb);
        QuestionTb.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        if (QuestionTb.getColumnModel().getColumnCount() > 0) {
            QuestionTb.getColumnModel().getColumn(0).setResizable(false);
        }

        Answer1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Answer1ActionPerformed(evt);
            }
        });

        jLabel2.setText("A");

        jLabel3.setText("B");

        jLabel4.setText("C");

        jLabel5.setText("D");

        jLabel6.setText("E");

        ResultLbl.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        ResultLbl.setForeground(new java.awt.Color(153, 0, 153));

        Answer5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Answer5ActionPerformed(evt);
            }
        });

        ShowQuestionsBtn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        ShowQuestionsBtn.setText("Show Questions");
        ShowQuestionsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowQuestionsBtnActionPerformed(evt);
            }
        });

        AnswersBtn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        AnswersBtn.setText("Check Answers");
        AnswersBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AnswersBtnActionPerformed(evt);
            }
        });

        BackBtn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        BackBtn.setText("Back");
        BackBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(23, 23, 23)
                                        .addComponent(jLabel2)
                                        .addGap(72, 72, 72))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(Answer1, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(31, 31, 31)
                                        .addComponent(jLabel3)
                                        .addGap(85, 85, 85)
                                        .addComponent(jLabel4)
                                        .addGap(78, 78, 78)
                                        .addComponent(jLabel5)
                                        .addGap(83, 83, 83)
                                        .addComponent(jLabel6))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(Answer2, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(Answer3, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(Answer4, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(Answer5, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addComponent(ResultLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 436, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(29, 29, 29)
                                .addComponent(twelthCmb, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(26, 26, 26)
                                .addComponent(ShowQuestionsBtn)
                                .addGap(62, 62, 62)
                                .addComponent(BackBtn))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(AnswersBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(168, 168, 168))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 38, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 636, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(twelthCmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ShowQuestionsBtn)
                    .addComponent(BackBtn))
                .addGap(32, 32, 32)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Answer2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Answer3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Answer1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Answer4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Answer5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel6)
                    .addComponent(jLabel5)
                    .addComponent(jLabel2))
                .addGap(20, 20, 20)
                .addComponent(AnswersBtn)
                .addGap(18, 18, 18)
                .addComponent(ResultLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void twelthCmbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_twelthCmbActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_twelthCmbActionPerformed

    private void Answer1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Answer1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Answer1ActionPerformed

    private void Answer5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Answer5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Answer5ActionPerformed

    private void ShowQuestionsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowQuestionsBtnActionPerformed

        try{
    con=DriverManager.getConnection("jdbc:mysql://localhost/counselling","root","root");
    st=con.createStatement();
    if(twelthCmb.getSelectedItem().equals("PCM"))
    {
    rs=st.executeQuery("select quest from pcmquest");
    DefaultTableModel dm=(DefaultTableModel)QuestionTb.getModel();
    dm.addTableModelListener(QuestionTb);
    dm.setRowCount(0);
      while(rs.next())
       {
           
        dm.addRow(new Object[]{rs.getString("quest")});
           
       }
    }
     }
        catch(Exception e){
          e.printStackTrace();
       }
     //////////////////////////////////////////////////////////////////////////////////
     try{
    con=DriverManager.getConnection("jdbc:mysql://localhost/counselling","root","root");
    st=con.createStatement();
    if(twelthCmb.getSelectedItem().equals("PCB"))
    {
    rs=st.executeQuery("select quest from pcbquest");
    DefaultTableModel dm=(DefaultTableModel)QuestionTb.getModel();
    dm.addTableModelListener(QuestionTb);
    dm.setRowCount(0);
      while(rs.next())
       {
           
        dm.addRow(new Object[]{rs.getString("quest")});
           
       }
    }
     }
        catch(Exception e){
          e.printStackTrace();
       }
     ///////////////////////////////////////////////////////////////////////////////////
     try{
    con=DriverManager.getConnection("jdbc:mysql://localhost/counselling","root","root");
    st=con.createStatement();
    if(twelthCmb.getSelectedItem().equals("COMMERCE"))
    {
    rs=st.executeQuery("select quest from comquest");
    DefaultTableModel dm=(DefaultTableModel)QuestionTb.getModel();
    dm.addTableModelListener(QuestionTb);
    dm.setRowCount(0);
      while(rs.next())
       {
           
        dm.addRow(new Object[]{rs.getString("quest")});
           
       }
    }
     }
        catch(Exception e){
          e.printStackTrace();
       }
     /////////////////////////////////////////////////////////////
     try{
    con=DriverManager.getConnection("jdbc:mysql://localhost/counselling","root","root");
    st=con.createStatement();
    if(twelthCmb.getSelectedItem().equals("ARTS"))
    {
    rs=st.executeQuery("select quest from artsquest");
    DefaultTableModel dm=(DefaultTableModel)QuestionTb.getModel();
    dm.addTableModelListener(QuestionTb);
    dm.setRowCount(0);
      while(rs.next())
       {
           
        dm.addRow(new Object[]{rs.getString("quest")});
           
       }
    }
     }
        catch(Exception e){
          e.printStackTrace();
       }
    }//GEN-LAST:event_ShowQuestionsBtnActionPerformed

    private void AnswersBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AnswersBtnActionPerformed
      
        try {
            con=DriverManager.getConnection("jdbc:mysql://localhost/counselling","root","root");
        } catch (SQLException ex) {
            Logger.getLogger(twelth.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        if(twelthCmb.getSelectedItem().equals("PCM"))
      {
         ans1=Answer1.getText();
         qry="select ans from pcmquest where qid=1";
            try {
                st = con.prepareStatement(qry);
            } catch (SQLException ex) {
                Logger.getLogger(twelth.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                rs=st.executeQuery(qry);
            } catch (SQLException ex) {
                Logger.getLogger(twelth.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                rs.next();
            } catch (SQLException ex) {
                Logger.getLogger(twelth.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            
            try {
                if(ans1.equals(rs.getString("ans")))
                {
                    mark=mark+1;
                }
            } catch (SQLException ex) {
                Logger.getLogger(twelth.class.getName()).log(Level.SEVERE, null, ex);
            }
            
          ////////////////////////////////////////////////////////////////////////////////////////////////
           ans2=Answer2.getText();
         qry="select ans from pcmquest where qid=2";
            try {
                st = con.prepareStatement(qry);
            } catch (SQLException ex) {
                Logger.getLogger(twelth.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                rs=st.executeQuery(qry);
            } catch (SQLException ex) {
                Logger.getLogger(twelth.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                rs.next();
            } catch (SQLException ex) {
                Logger.getLogger(twelth.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                if(ans2.equals(rs.getString("ans")))
                {
                    mark=mark+1;
                }
            } catch (SQLException ex) {
                Logger.getLogger(twelth.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            //////////////////////////////////////////////////////////
             ans3=Answer3.getText();
         qry="select ans from pcmquest where qid=3";
            try {
                st = con.prepareStatement(qry);
            } catch (SQLException ex) {
                Logger.getLogger(twelth.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                rs=st.executeQuery(qry);
            } catch (SQLException ex) {
                Logger.getLogger(twelth.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                rs.next();
            } catch (SQLException ex) {
                Logger.getLogger(twelth.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                if(ans3.equals(rs.getString("ans")))
                {
                mark=mark+1;
                }
            } catch (SQLException ex) {
                Logger.getLogger(twelth.class.getName()).log(Level.SEVERE, null, ex);
            }
          ////////////////////////////////////////////////////////////////////////////
           ans4=Answer4.getText();
         qry="select ans from pcmquest where qid=4";
            try {
                st = con.prepareStatement(qry);
            } catch (SQLException ex) {
                Logger.getLogger(twelth.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                rs=st.executeQuery(qry);
            } catch (SQLException ex) {
                Logger.getLogger(twelth.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                rs.next();
            } catch (SQLException ex) {
                Logger.getLogger(twelth.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            try {
                if(ans4.equals(rs.getString("ans")))
                {
                mark=mark+1;
                }
            } catch (SQLException ex) {
                Logger.getLogger(twelth.class.getName()).log(Level.SEVERE, null, ex);
            }
          //////////////////////////////////////////////////////////////////////////////
           ans5=Answer5.getText();
         qry="select ans from pcmquest where qid=5";
            try {
                st = con.prepareStatement(qry);
            } catch (SQLException ex) {
                Logger.getLogger(twelth.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                rs=st.executeQuery(qry);
            } catch (SQLException ex) {
                Logger.getLogger(twelth.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                rs.next();
            } catch (SQLException ex) {
                Logger.getLogger(twelth.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            try {
                if(ans5.equals(rs.getString("ans")))
                {
                mark=mark+1;
                }
            } catch (SQLException ex) {
                Logger.getLogger(twelth.class.getName()).log(Level.SEVERE, null, ex);
            }
            
/////////////////////////////////////////////////////////////////////////////////////////////////////
            
        try {
            con=DriverManager.getConnection("jdbc:mysql://localhost/counselling","root","root");
        } catch (SQLException ex) {
            Logger.getLogger(twelth.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        if(twelthCmb.getSelectedItem().equals("PCB"))
      {
         ans1=Answer1.getText();
         qry="select ans from pcbquest where qid=1";
            try {
                st = con.prepareStatement(qry);
            } catch (SQLException ex) {
                Logger.getLogger(twelth.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                rs=st.executeQuery(qry);
            } catch (SQLException ex) {
                Logger.getLogger(twelth.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                rs.next();
            } catch (SQLException ex) {
                Logger.getLogger(twelth.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            
            try {
                if(ans1.equals(rs.getString("ans")))
                {
                    mark=mark+1;
                
                }
            } catch (SQLException ex) {
                Logger.getLogger(twelth.class.getName()).log(Level.SEVERE, null, ex);
            }
          ////////////////////////////////////////////////////////////////////////////////////////////////
           ans2=Answer2.getText();
         qry="select ans from pcbquest where qid=2";
            try {
                st = con.prepareStatement(qry);
            } catch (SQLException ex) {
                Logger.getLogger(twelth.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                rs=st.executeQuery(qry);
            } catch (SQLException ex) {
                Logger.getLogger(twelth.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                rs.next();
            } catch (SQLException ex) {
                Logger.getLogger(twelth.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                if(ans2.equals(rs.getString("ans")))
                {
                    mark=mark+1;
                
                }
            } catch (SQLException ex) {
                Logger.getLogger(twelth.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            //////////////////////////////////////////////////////////
             ans3=Answer3.getText();
         qry="select ans from pcbquest where qid=3";
            try {
                st = con.prepareStatement(qry);
            } catch (SQLException ex) {
                Logger.getLogger(twelth.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                rs=st.executeQuery(qry);
            } catch (SQLException ex) {
                Logger.getLogger(twelth.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                rs.next();
            } catch (SQLException ex) {
                Logger.getLogger(twelth.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                if(ans3.equals(rs.getString("ans")))
                {
                    mark=mark+1;
                
                }
            } catch (SQLException ex) {
                Logger.getLogger(twelth.class.getName()).log(Level.SEVERE, null, ex);
            }
          ////////////////////////////////////////////////////////////////////////////
           ans4=Answer4.getText();
         qry="select ans from pcbquest where qid=4";
            try {
                st = con.prepareStatement(qry);
            } catch (SQLException ex) {
                Logger.getLogger(twelth.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                rs=st.executeQuery(qry);
            } catch (SQLException ex) {
                Logger.getLogger(twelth.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                rs.next();
            } catch (SQLException ex) {
                Logger.getLogger(twelth.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            try {
                if(ans4.equals(rs.getString("ans")))
                {
                    mark=mark+1;
                
                }
            } catch (SQLException ex) {
                Logger.getLogger(twelth.class.getName()).log(Level.SEVERE, null, ex);
            }
          //////////////////////////////////////////////////////////////////////////////
           ans5=Answer5.getText();
         qry="select ans from pcbquest where qid=5";
            try {
                st = con.prepareStatement(qry);
            } catch (SQLException ex) {
                Logger.getLogger(twelth.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                rs=st.executeQuery(qry);
            } catch (SQLException ex) {
                Logger.getLogger(twelth.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                rs.next();
            } catch (SQLException ex) {
                Logger.getLogger(twelth.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            try {
                if(ans5.equals(rs.getString("ans")))
                {
                    mark=mark+1;
                
                }
            } catch (SQLException ex) {
                Logger.getLogger(twelth.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            
        try {
            con=DriverManager.getConnection("jdbc:mysql://localhost/counselling","root","root");
        } catch (SQLException ex) {
            Logger.getLogger(twelth.class.getName()).log(Level.SEVERE, null, ex);
        }
      }
        if(twelthCmb.getSelectedItem().equals("COMMERCE"))
      {
         ans1=Answer1.getText();
         qry="select ans from comquest where qid=1";
            try {
                st = con.prepareStatement(qry);
            } catch (SQLException ex) {
                Logger.getLogger(twelth.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                rs=st.executeQuery(qry);
            } catch (SQLException ex) {
                Logger.getLogger(twelth.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                rs.next();
            } catch (SQLException ex) {
                Logger.getLogger(twelth.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            
            try {
                if(ans1.equals(rs.getString("ans")))
                {
                    mark=mark+1;
                
                }
            } catch (SQLException ex) {
                Logger.getLogger(twelth.class.getName()).log(Level.SEVERE, null, ex);
            }
          ////////////////////////////////////////////////////////////////////////////////////////////////
           ans2=Answer2.getText();
         qry="select ans from comquest where qid=2";
            try {
                st = con.prepareStatement(qry);
            } catch (SQLException ex) {
                Logger.getLogger(twelth.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                rs=st.executeQuery(qry);
            } catch (SQLException ex) {
                Logger.getLogger(twelth.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                rs.next();
            } catch (SQLException ex) {
                Logger.getLogger(twelth.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                if(ans2.equals(rs.getString("ans")))
                {
                    mark=mark+1;
                
                }
            } catch (SQLException ex) {
                Logger.getLogger(twelth.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            //////////////////////////////////////////////////////////
             ans3=Answer3.getText();
         qry="select ans from comquest where qid=3";
            try {
                st = con.prepareStatement(qry);
            } catch (SQLException ex) {
                Logger.getLogger(twelth.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                rs=st.executeQuery(qry);
            } catch (SQLException ex) {
                Logger.getLogger(twelth.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                rs.next();
            } catch (SQLException ex) {
                Logger.getLogger(twelth.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                if(ans3.equals(rs.getString("ans")))
                {
                    mark=mark+1;
                
                }
            } catch (SQLException ex) {
                Logger.getLogger(twelth.class.getName()).log(Level.SEVERE, null, ex);
            }
          ////////////////////////////////////////////////////////////////////////////
           ans4=Answer4.getText();
         qry="select ans from comquest where qid=4";
            try {
                st = con.prepareStatement(qry);
            } catch (SQLException ex) {
                Logger.getLogger(twelth.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                rs=st.executeQuery(qry);
            } catch (SQLException ex) {
                Logger.getLogger(twelth.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                rs.next();
            } catch (SQLException ex) {
                Logger.getLogger(twelth.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            try {
                if(ans4.equals(rs.getString("ans")))
                {
                    mark=mark+1;
                
                }
            } catch (SQLException ex) {
                Logger.getLogger(twelth.class.getName()).log(Level.SEVERE, null, ex);
            }
          //////////////////////////////////////////////////////////////////////////////
           ans5=Answer5.getText();
         qry="select ans from comquest where qid=5";
            try {
                st = con.prepareStatement(qry);
            } catch (SQLException ex) {
                Logger.getLogger(twelth.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                rs=st.executeQuery(qry);
            } catch (SQLException ex) {
                Logger.getLogger(twelth.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                rs.next();
            } catch (SQLException ex) {
                Logger.getLogger(twelth.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            try {
                if(ans5.equals(rs.getString("ans")))
                {
                   mark=mark+1;
                
                }
            } catch (SQLException ex) {
                Logger.getLogger(twelth.class.getName()).log(Level.SEVERE, null, ex);
            }
            
      }  
        try {
            con=DriverManager.getConnection("jdbc:mysql://localhost/counselling","root","root");
        } catch (SQLException ex) {
            Logger.getLogger(twelth.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        if(twelthCmb.getSelectedItem().equals("ARTS"))
      {
         ans1=Answer1.getText();
         qry="select ans from artsquest where qid=1";
            try {
                st = con.prepareStatement(qry);
            } catch (SQLException ex) {
                Logger.getLogger(twelth.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                rs=st.executeQuery(qry);
            } catch (SQLException ex) {
                Logger.getLogger(twelth.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                rs.next();
            } catch (SQLException ex) {
                Logger.getLogger(twelth.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            
            try {
                if(ans1.equals(rs.getString("ans")))
                {
                    mark=mark+1;
                
                }
            } catch (SQLException ex) {
                Logger.getLogger(twelth.class.getName()).log(Level.SEVERE, null, ex);
            }
          ////////////////////////////////////////////////////////////////////////////////////////////////
           ans2=Answer2.getText();
         qry="select ans from artsquest where qid=2";
            try {
                st = con.prepareStatement(qry);
            } catch (SQLException ex) {
                Logger.getLogger(twelth.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                rs=st.executeQuery(qry);
            } catch (SQLException ex) {
                Logger.getLogger(twelth.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                rs.next();
            } catch (SQLException ex) {
                Logger.getLogger(twelth.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                if(ans2.equals(rs.getString("ans")))
                {
                    mark=mark+1;
                
                }
            } catch (SQLException ex) {
                Logger.getLogger(twelth.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            //////////////////////////////////////////////////////////
             ans3=Answer3.getText();
         qry="select ans from artsquest where qid=3";
            try {
                st = con.prepareStatement(qry);
            } catch (SQLException ex) {
                Logger.getLogger(twelth.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                rs=st.executeQuery(qry);
            } catch (SQLException ex) {
                Logger.getLogger(twelth.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                rs.next();
            } catch (SQLException ex) {
                Logger.getLogger(twelth.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                if(ans3.equals(rs.getString("ans")))
                {
                  mark=mark+1;
                                }
            } catch (SQLException ex) {
                Logger.getLogger(twelth.class.getName()).log(Level.SEVERE, null, ex);
            }
          ////////////////////////////////////////////////////////////////////////////
           ans4=Answer4.getText();
         qry="select ans from artsquest where qid=4";
            try {
                st = con.prepareStatement(qry);
            } catch (SQLException ex) {
                Logger.getLogger(twelth.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                rs=st.executeQuery(qry);
            } catch (SQLException ex) {
                Logger.getLogger(twelth.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                rs.next();
            } catch (SQLException ex) {
                Logger.getLogger(twelth.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            try {
                if(ans4.equals(rs.getString("ans")))
                {
                    mark=mark+1;
                
                }
            } catch (SQLException ex) {
                Logger.getLogger(twelth.class.getName()).log(Level.SEVERE, null, ex);
            }
          //////////////////////////////////////////////////////////////////////////////
           ans5=Answer5.getText();
         qry="select ans from artsquest where qid=5";
            try {
                st = con.prepareStatement(qry);
            } catch (SQLException ex) {
                Logger.getLogger(twelth.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                rs=st.executeQuery(qry);
            } catch (SQLException ex) {
                Logger.getLogger(twelth.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                rs.next();
            } catch (SQLException ex) {
                Logger.getLogger(twelth.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            try {
                if(ans5.equals(rs.getString("ans")))
                {
                    mark=mark+1;
                
                }
            } catch (SQLException ex) {
                Logger.getLogger(twelth.class.getName()).log(Level.SEVERE, null, ex);
            }
      }
        {   
    if(mark<2)
        {
           ResultLbl.setText("You Are Average in this stream and you scored :"+mark);
       }
    else if(mark==3 && mark==4)
    {
      ResultLbl.setText("You Are Average in this stream and you scored :"+mark);
       }
    else{
        ResultLbl.setText("You Are Average in this stream and you scored :"+mark);
               
    }//GEN-LAST:event_AnswersBtnActionPerformed
    
    try {
                st = con.createStatement();
            } catch (SQLException ex) {
                Logger.getLogger(twelth.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                st.executeUpdate("update userDetails set marks=('"+mark+"')");
            } catch (SQLException ex) {
                Logger.getLogger(twelth.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }
         mark =0;
   
            
      }}
    private void BackBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackBtnActionPerformed
      this.setVisible(false);
new Qualification().setVisible(true);  // TODO add your handling code here:
    }//GEN-LAST:event_BackBtnActionPerformed
            
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new twelth().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Answer1;
    private javax.swing.JTextField Answer2;
    private javax.swing.JTextField Answer3;
    private javax.swing.JTextField Answer4;
    private javax.swing.JTextField Answer5;
    private javax.swing.JButton AnswersBtn;
    private javax.swing.JButton BackBtn;
    private javax.swing.JTable QuestionTb;
    private javax.swing.JLabel ResultLbl;
    private javax.swing.JButton ShowQuestionsBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> twelthCmb;
    // End of variables declaration//GEN-END:variables
}
